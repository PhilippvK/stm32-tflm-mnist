# Fix For MACOS compability
IF(APPLE)
    SET(HAVE_FLAG_SEARCH_PATHS_FIRST 0)
    SET(TOOLCHAIN_PREFIX "/usr/local") # Set depending on System (f.e. Homebrew)
ENDIF()

PROJECT(STM32-TFLM-MNIST LANGUAGES C CXX)

SET(CMAKE_BUILD_TYPE Debug)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
ENABLE_LANGUAGE(ASM)

ADD_DEFINITIONS(-DDEBUG_UART_HANDLE=UartHandle)

# Remove -rdynamic option from linking that is not supported by arm-none-eabi
# Also remove "undefined reference to `_sbrk'" error
SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "-specs=nano.specs -specs=nosys.specs")
SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS ${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS})
SET(CMAKE_C_FLAGS "-mcpu=cortex-m4 -mthumb -mfloat-abi=softfp -Wall \
-mfpu=fpv4-sp-d16 -Wl,-Map=output.map -Wl,--gc-sections -g3")

SET(TFLM_MODES interpreter compiler)
SET(TFLM_COMPILER_EXECUTABLE "TODO") # TODO

### Configure STM32 Board here ###
#SET(STM32_CHIP STM32F413ZHT6)
SET(STM32_CHIP STM32F769NIH6)
#SET(STM_BOARD STM32F413H-Discovery)
SET(STM_BOARD STM32F769I-Discovery)
STRING(REPLACE "-" "_" STM_BOARD_CLEAN ${STM_BOARD})
STRING(TOUPPER ${STM_BOARD_CLEAN} STM_BOARD_CLEAN_UPPER)
ADD_DEFINITIONS(-DSTM32_BOARD_${STM_BOARD_CLEAN_UPPER})

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
SET(CMAKE_TOOLCHAIN_FILE ${CMAKE_MODULE_PATH}/gcc_stm32.cmake)
INCLUDE(${CMAKE_TOOLCHAIN_FILE})

# Configure TFML Board
IF(${STM_BOARD} STREQUAL "STM32F413H-Discovery")
  SET(TFLM_BOARD disco_f413zh)
ELSEIF(${STM_BOARD} STREQUAL "STM32F769I-Discovery")
  SET(TFLM_BOARD disco_f769ni)
ENDIF()

### Configure TFML Mode here ###
#SET(TFLM_MODE compiler)
SET(TFLM_MODE interpreter)

# (TODO)
IF(${TFLM_MODE} STREQUAL compiler)
  SET(CMAKE_TFLM_COMPILER_FILE ${CMAKE_MODULE_PATH}/tflm_compiler.cmake)
  INCLUDE(${CMAKE_TFLM_COMPILER_FILE})
ENDIF()

### Enable/Disable usage of CMSISNN custom kernels ###
SET(TFLM_USE_CMSIS_NN ON)
IF(${TFLM_USE_CMSIS_NN})
  ADD_DEFINITIONS(-DCMSIS_NN)
ENDIF()

### Enable/Disable Benchmarking ###
SET(ENABLE_BENCHMARKING OFF)
IF(${ENABLE_BENCHMARKING})
  ADD_DEFINITIONS(-DBENCHMARKING)
ENDIF()

# Disable MBED (Only valid for Tensorflow Toolchain)
ADD_DEFINITIONS(-DNOMBED)

### Configure 'mnist' Example ###
SET(FAKE_TOUCH ON) # Use SD Card instead of Touchscreen
ADD_DEFINITIONS(-DTFLM_EXAMPLE="mnist" -DTFLM_BOARD="${TFLM_BOARD}")
IF(${FAKE_TOUCH})
  ADD_DEFINITIONS(-DFAKE_TOUCH -DTFLM_FILE_EXT="*.bmp")
ENDIF()

IF(NOT STM32Cube_DIR)
  ### Edit User/Name for using a custom Repository ###
  SET(CUBE_REPO_USER "STMicroelectronics")
  SET(CUBE_REPO_NAME "STM32Cube${STM32_FAMILY}")

  # Fetching Cube Firmware Repository
  FIND_PACKAGE(Git REQUIRED)
  SET(CUBE_SOURCE "${CMAKE_BINARY_DIR}/STM32${STM32_FAMILY}-Cube-Firmware")
  IF(EXISTS ${CUBE_SOURCE})
    MESSAGE(STATUS "Cube FW directory exists")
  ELSE()
    MESSAGE(STATUS "Getting Cube Firmware")
    SET(GIT_REPOSITORY
    "https://github.com/${CUBE_REPO_USER}/${CUBE_REPO_NAME}.git")
    EXECUTE_PROCESS(COMMAND
    ${GIT_EXECUTABLE} clone ${GIT_REPOSITORY} ${CUBE_SOURCE})
  ENDIF()
  SET(STM32Cube_DIR ${CUBE_SOURCE})
ENDIF()

# Prepare Tensorflow Lite (micro)
#SET(TF_COMMIT d6426459bca2971b611ca9773858e55f6cc1a9af) # TODO
FIND_PACKAGE(TFLite REQUIRED)
SET(TFLITE_PLATFORM micro)

### Configure FreeRTOS (optional, not supported!)
#SET(FREERTOS_HEAP_IMPL 1)
#FIND_PACKAGE(FreeRTOS REQUIRED)

### Configure SD/USB-Support ###
SET(STORAGE_DRIVER "SDCARD")
FIND_PACKAGE(FATFS REQUIRED)
FIND_PACKAGE(USBHost COMPONENTS MSC REQUIRED)

### Configure CMSIS(-NN) ##
FIND_PACKAGE(CMSIS REQUIRED)
IF(${TFLM_USE_CMSIS_NN})
FIND_PACKAGE(CMSISNN REQUIRED)
ENDIF()

### Configure STM32 HAL/BSP/LL ###
IF(${TFLM_BOARD} STREQUAL "disco_f413zh")
  FIND_PACKAGE(STM32HAL COMPONENTS sram gpio uart fmpi2c
  dfsdm sd dma qspi REQUIRED)
  FIND_PACKAGE(STM32LL COMPONENTS fsmc sdmmc REQUIRED)
  FIND_PACKAGE(STM32BSP COMPONENTS ts lcd ili9325 stmpe811
  st7789h2 ft6x06 wm8994 psram sd REQUIRED)
ELSEIF(${TFLM_BOARD} STREQUAL "disco_f769ni")
  FIND_PACKAGE(STM32HAL COMPONENTS sram gpio uart
  dfsdm sd dma qspi dsi i2c sdram dma2d ltdc REQUIRED)
  FIND_PACKAGE(STM32LL COMPONENTS fmc sdmmc REQUIRED)
  FIND_PACKAGE(STM32BSP COMPONENTS ts lcd
  ft6x06 sdram sd otm8009a REQUIRED)
ENDIF()

# Gather all project source files
FILE(GLOB EXAMPLE_SOURCES
    "Src/*.c"
    "Src/*.cc"
    "Src/misc/*.c"
    "Src/misc/*.cc"
    "Src/misc/benchmarking/*.c"
    "Src/misc/benchmarking/*.cc"
    "Src/${TFLM_BOARD}/*.c"
    "Src/${TFLM_BOARD}/*.cc"
    )

INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}
    "${PROJECT_SOURCE_DIR}/Src"
    "${PROJECT_SOURCE_DIR}/Src/misc"
    "${PROJECT_SOURCE_DIR}/Src/misc/benchmarking"
    "${PROJECT_SOURCE_DIR}/Src/${TFLM_BOARD}"
    ${STM32HAL_INCLUDE_DIR}
    ${STM32LL_INCLUDE_DIR}
    ${CMSIS_INCLUDE_DIRS}
    ${CMSISNN_INCLUDE_DIRS}
    ${FreeRTOS_INCLUDE_DIRS}
    ${STM32BSP_INCLUDE_DIR}
    ${TFLite_INCLUDE_DIRS}
    ${FATFS_INCLUDE_DIRS}
    )

ADD_EXECUTABLE(
    ${CMAKE_PROJECT_NAME}.elf
    ${EXAMPLE_SOURCES}
    ${STM32HAL_SOURCES}
    ${STM32BSP_SOURCES}
    ${STM32LL_SOURCES}
    ${FreeRTOS_SOURCES}
    ${TFLite_SOURCES}
    ${CMSIS_SOURCES}
    ${CMSISNN_SOURCES}
    ${FATFS_SOURCES}
    )

SET(STM32_LINKER_SCRIPT ${CMSIS_LINKER_SCRIPT})

TARGET_COMPILE_DEFINITIONS(${CMAKE_PROJECT_NAME}.elf PUBLIC STM_BSP)

ADD_CUSTOM_TARGET(
    flash
    COMMAND ${CMAKE_OBJCOPY} -Obinary
    ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.bin
    COMMAND st-flash write ${CMAKE_PROJECT_NAME}.bin 0x8000000
    )

ADD_DEPENDENCIES(flash ${CMAKE_PROJECT_NAME}.elf)

IF(${STM_BOARD} STREQUAL "STM32F413H-Discovery")
  SET(OPENOCD_BOARD "board/st_nucleo_f4.cfg")
ELSEIF(${STM_BOARD} STREQUAL "STM32F769I-Discovery")
  SET(OPENOCD_BOARD "board/stm32f7discovery.cfg")
ENDIF()

ADD_CUSTOM_TARGET(
    debug
    COMMAND openocd -f ${OPENOCD_BOARD} -c
    "program ${CMAKE_PROJECT_NAME}.elf reset exit" > /dev/null 2>&1
    COMMAND openocd -f ${OPENOCD_BOARD} > /dev/null 2>&1 & sleep 2
    COMMAND ${TARGET_TRIPLET}-gdb -quiet -tui
    -command=${CMAKE_CURRENT_LIST_DIR}/GDBCommands
    -se ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}.elf
    COMMAND killall -15 openocd
    )

ADD_DEPENDENCIES(debug ${CMAKE_PROJECT_NAME}.elf)

STM32_SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}.elf)
STM32_ADD_HEX_BIN_TARGETS(${CMAKE_PROJECT_NAME}.elf)
STM32_PRINT_SIZE_OF_TARGETS(${CMAKE_PROJECT_NAME}.elf)
